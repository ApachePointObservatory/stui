# -*- tcl -*-
#
# Don't typo when looking for an error trace (as the typo becomes the error trace!)
#
proc tb {} {
   global errorInfo
   puts $errorInfo
}

#
# Provide tclx's loop command
#
proc loop {varName start end args} {
				    
  if {[llength $args] > 2} {
       error "too many args"
  } elseif {[llength $args] == 0} {
       error "not enough args"
  } elseif {[llength $args] == 1} {
      set lincr 1
      set body [lindex $args 0]
  } else {
      set lincr [lindex $args 0] 
      set body [lindex $args 1]
  }

   upvar 1 $varName loopVar
   set loopVar $start
   while {1} {
       if {[expr ($lincr > 0)]} {
           if {[expr $loopVar >= $end]} {break}
       } else {
           if {[expr $loopVar <= $end]} {break}
       }

      set code [catch {uplevel 1 $body} message]
      switch -- $code {
	 0 { }
	 1 { global errorInfo; global errorCode; return  -code      error \
		 -errorinfo $errorInfo \
		 -errorcode $errorCode $message }
	 2 { return -code return $message }
	 3 { return {} }
	 4 { }
	 default { return -code $code $message }
      }
       
     incr loopVar $lincr
   }
}

#
# dervish's echo
#
proc echo {args} {
   puts $args
}

#
# and murmur, a logging command
#
proc murmur {args} {
   #puts $args
}

#------------------------------------------------------------------------------
#
# Robert Lupton's scheduler implementation of the after method 
#
#  if you have a proc foo that expects a scalar and a list as arguments,
#  and it should be run every 5s, you could say:
#
#       schedule foo "abcd {1 2}" 5
#
# to cancel it, use 
#
#       schedule foo "" 0
#
# The command
#	schedule list
# will list all scheduled tasks (schedule list will be more verbose);
#	schedule list task [quiet]
# returns that task's arguments and interval; if quiet is specified nothing is
# printed and 1/0 is returned according to whether the task is/isn't scheduled
#
proc schedule {procname {args ""} {delay 0}} {
    global after_$procname ${procname}Delay verbose scheduled
    global show_scheduled_errors

    if {$procname == "list"} {
       if {$args != ""} {
	  set cmd $args; global ${cmd}Delay
	  if {![info exists scheduled($cmd)] || ![info exists ${cmd}Delay]} {
	     if !$delay {	
		echo "Command $cmd is not currently scheduled"
	     }
	     return 0
	  }
	  if $delay {
	     return 1
	  } else {
	     return [list $scheduled($cmd) [expr 0.001*[set ${cmd}Delay]]]
	  }
       }
       
       if {$delay != 0} {
	  error "You cannot specify a delay with schedule list"
       }
	  
       set fmt "%-30s  %-30s  %4s"
       puts [format $fmt "command" "arguments" "interval (s)"]
       puts [format $fmt "-------" "---------" "------------"]

       foreach cmd [lsort [array names scheduled]] {
	  global ${cmd}Delay
	  
	  set arg [string trimleft $scheduled($cmd)]
	  if {"$arg" == ""} {
	     set arg "{}"
	  }

	  if {[string length $arg] > 30} {# insert some newlines
	     set alist [split $arg " "]
	     set arg ""; set line ""
	     loop i 0 [llength $alist] {
		if {[string length "$line"] > 30} {
		   append arg "$line\\\n[format [lindex $fmt 0] {}]         ";
		   set line ""
		}
		append line "[lindex $alist $i] "
	     }
	     append arg "$line"
	  }

	  puts [format $fmt  $cmd $arg \
		    [format "%.1f" [expr 0.001*[set ${cmd}Delay]]]]
       }
       if [info exists show_scheduled_errors] {
	  echo; echo "Errors will be popped up"
       } else {
	  echo; echo "Variable show_scheduled_errors is not set"
       }
       return
    }

    if {$delay < 0 && [set ${procname}Delay] != [expr -$delay*1000]} {
        # someone has set the delay to 0, so stop $procname
        set delay [set ${procname}Delay]
    }
    if {$delay > 3000} { echo "scheduler: delay is $delay, in seconds" }

    if {$delay >= 0} {
        set ${procname}Delay [expr int($delay*1000)]

        zap1After after_$procname;      # if we already have in event loop,
        # delete it. One is enough
        if {$delay == 0} {
	    murmur  "Stopping $procname"
	    if [info exists after_$procname] {unset after_$procname}
	    if [info exists scheduled($procname)] {unset scheduled($procname)}

            return 0
        } else {
            murmur  "Starting $procname"
        }
    }

    # do the work. Trap errors: the first time around, send error message 
    # to screen; otherwise only do so if show_scheduled_errors is set
    if {$delay < 0 || [info exists show_scheduled_errors]} {
        if [catch {eval $procname $args} msg] {
            murmur $msg
	   if [info exists show_scheduled_errors] {
	      tkerror "Error from scheduled job $procname in process [pid]: $msg"
	   }
        }
    } else {
        if [catch {eval $procname $args} msg] {
            murmur $msg
	    echo $msg
	    global errorInfo
	    echo $errorInfo
	    echo "$procname is scheduled, further errors sent to murmur"
        }
    }

    # reschedule this proc, i.e. put it back into the event loop.
    # A negative delay means that this is a re-schedule, so no messages
    # should be printed
    if {$delay > 0} {
        murmur  [format "Next $procname event loop pending in %d ms" [set ${procname}Delay]]

        set delay [expr -$delay]
        set scheduled($procname) $args;	# this is solely to allow use to list
       					# scheduled commands with their args
    }

    set after_$procname \
	[after [set ${procname}Delay] \
	     [list schedule $procname "$args" $delay]]

    return 0
}

#
# deletes the specified after command in the event loop.
#
proc zap1After { scheduled } {
    global verbose

    # 1st try the actual parameter specified
    global $scheduled
    if {[info exists $scheduled]} {
        if {[string length $scheduled]} {
            #murmur "Cancelling event loop: uplevel 0 after cancel [set $scheduled]"
            uplevel 0 after cancel [set $scheduled]
        }
        uplevel 0 unset $scheduled
        return 0
    }

    # Now try putting after_  before what was specified
    set scheduled "after_$scheduled"
    global $scheduled
    if {[info exists $scheduled]} {
        if {[string length $scheduled]} {
            #murmur "Cancelling event loop: uplevel 0 after cancel [set $scheduled]"
            uplevel 0 after cancel [set $scheduled]
        }
        uplevel 0 unset $scheduled
        return 0
    }

    # Nothing to delete, but that is not really an error condition
    regsub {after_after_} $scheduled "" name
    murmur "Can not find $name in the event loop, so can not delete it"
    return 0
}

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#
# colors for the various states of things
#
set colors(bad) red
set colors(ignore) yellow
set colors(ok) black
set colors(led_bad) red
set colors(led_ignore) yellow
set colors(led_ok) green
set colors(led_unknown) grey
foreach el [array names colors led_*] {
   set colors(big_$el) $colors($el)
}

#
# Set a colour;  useful from Tkinter.call, and performs keyword checking
#
proc setMcpColor {key value} {
   global colors

   if [info exists colors($key)] {
      set colors($key) $value
   } else {
      tk_messageBox -message "Unknown colour type $key; please use one of [array names colors]" -type ok
   }
}

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#
# Include machine generated procs to handle unpacking PLC bits into the mcpData array
#
include XXX

#
# Routines that are called by python keyword callbacks;  the ones for the ab_XXX
# words are generated automatically
#

proc set_aliveAt {val} {
     global mcpData

     set mcpData(ctime) $val
}

proc set_plcVersion {val} {
   global mcpData
   set mcpData(plcVersion) $val
}
#
# The automatic ones assume a single Int argument; status takes 4
#
proc set_status {v0 v1 v2 v3} {
   global mcpData

   set mcpData(status)   $v0
   set mcpData(azstate)  $v1
   set mcpData(altstate) $v2
   set mcpData(rotstate) $v3
}

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#
# Handle checking plcVersion strings
#
proc plcVersion {args} {
   global interlockDescriptions mcpData
   
   set version $mcpData(plcVersion)

   if {![regexp {Version ([^ ]+) +[$]Name:? *([^ $]*)} \
            $interlockDescriptions(version_id) {} plc_n plc_version] ||
       $plc_version == ""} {
      if {$version == $plc_n} {
	 return "NOCVS:$version"
      } else {
	 return "NOCVS:$version:$plc_n"
      }
   } elseif {$version == ""} {
      return "(unavailable)"
   } elseif {$version == $plc_n} {      # version from PLC matches version in
      return $plc_version;              # interlockDescriptions (i.e. sdss.csv)
   } else {
      return "MISMATCH:$version:$plc_n"
   }
}

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#
# Make a label l that doesn't appear but is the same size as one 
# labelled "text"
#
proc phantom_label {l text} {
   label $l -text $text -relief flat
   set bg [lindex [. configure -bg] 4]
   $l configure -foreground $bg

   return $l
}

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#
# Useful to show data via Tkinter.call()
#
proc showMcpData {key} {
   global mcpData
   
   puts "$key $mcpData($key)"
}

if ![info exists env(MCPOP_DIR)] {
   proc mcpGetFields {} {
      global mcpDataNames
      
      return [array get mcpDataNames]
   }
}

