#!/usr/bin/env python
import os, re, time, Tkinter
import twisted.internet.tksupport
import RO.Comm.HubConnection
import opscore.actor.cmdkeydispatcher
import opscore.actor.model
import opscore.actor.keyvar

def addTclABCallback(field):
    """Add a callback for Allen-Bradley field (e.g. I1_L13)"""

    #print field

    tclSetName = "set_%s" % (field[3:] if re.search(r"^ab_", field) else field)

    exec """def %s(keyVar):
    #print "%s", keyVar
    if keyVar[0] is not None:
        root.call("%s", int(keyVar[0]))
        root.call("set", "mcpData(ctime)", int(time.time()))

mcpModel.%s.addCallback(%s, callNow=False)

""" % (field, field, tclSetName, field, field)

def ab_status(keyVar):
    """status is 4 ints, so handle specially"""
    if keyVar[0] is not None:
        root.call("set_status", keyVar[0], keyVar[1], keyVar[2], keyVar[3])

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

if __name__ == "__main__":
    def connectCallback(connection):
        pass
        #print "connectCallback", connection.getFullState()[1]

    root = Tkinter.Tk()

    twisted.internet.tksupport.install(root)

    connection = RO.Comm.HubConnection.HubConnection("hub25m", 9877)
    connection.addStateCallback(connectCallback)
    connection.connect(username="rhl", progID="apo", password="ntbrnrMux")

    dispatcher = opscore.actor.cmdkeydispatcher.CmdKeyVarDispatcher(connection=connection,
                                                                    logFunc=(lambda *args, **keys: ()))
    opscore.actor.model.Model.setDispatcher(dispatcher)
    
    mcpModel = opscore.actor.model.Model("mcp")
    #
    # Define callbacks for all KeyVar's beginning "ab_"
    #
    root.call("source", os.path.join(os.environ["INTERLOCKS_DIR"], "etc", "dervish.tcl"))

    for o in mcpModel.__dict__.values():
        if isinstance(o, opscore.actor.keyvar.KeyVar):
            if re.search(r"^ab_", o.name) and o.name not in ("ab_status",):
                addTclABCallback(o.name)
                #
                # Tell the displays that this bit will (eventually) appear
                #
                t = o.key.typedValues.vtypes[0]
                if isinstance(t, opscore.protocols.types.Bits):
                    for k in t.bitFields.keys():
                        root.call("set", "mcpDataNames(%s)" % k, "1")

    mcpModel.ab_status.addCallback(ab_status, callNow=False)
    addTclABCallback("aliveAt")
    addTclABCallback("plcVersion")
    addTclABCallback("lavaLamp")

    root.call("set", "mcpDataNames(ctime)", "1") # mcpData(ctime) is used too

    try:
        root.call("source", os.path.join(os.environ["INTERLOCKS_DIR"], "etc", "interlockStartup.tcl"))
        toplevel = Tkinter.Toplevel(); toplevel.geometry("+40-30")
        root.call("startInterlocks", toplevel, 1)
        #root.call("setMcpColor", "led_bad", "orchid")
    except:
        root.call("tb")                 # traceback; print tcl's $errorinfo

    dispatcher.reactor.run()
