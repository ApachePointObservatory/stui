Warning: RO.Comm.Generic framework not set; setting to tk
Python Library Documentation: module CommandWdgSet

NNAAMMEE
    CommandWdgSet - SOP command widgets

FFIILLEE
    /Users/elenam/sdss4/stui/TUI/Inst/SOP/CommandWdgSet.py

DDEESSCCRRIIPPTTIIOONN
    These objects are used to describe one or more sop commands.
    
    History:
    2010-06-23 ROwen    Commented out a diagnostic print statement
    2010-06-28 ROwen    Bug fix: an exception was broken (thanks to pychecker)
    2010-11-18 ROwen    Added a Stop button for commands that can be aborted.
    2011-05-18 SBeland and ROwen    Added StringParameterWdgSet.
    2011-07-02 ROwen    Bug fix: The command widgets would not shrink when stages were removed.
    2011-07-07 ROwen    Improved computation of displayName from name such that names like
                        doAPOGEEScience are handled correctly.
                        Help strings now show name instead of displayName to simplify the mapping
                        between the SOP window and sop commands.
    2011-07-11 ROwen    Enhance parameter widget set classes:
                        - Add arguments trackCurr, ctrlColSpan, ctrlSticky.
                        - Update documentation (it had fallen behind for most subclasses).
    2012-11-01 ROwen    Address ticket #1688:
                        - Modified so that X never sends an abort command to SOP. To enforce this,
                          doCmd no longer accepts additional keyword arguments, to avoid abortCmdStr.
                        - Modified to confirm Stop.
    2013-03-21 ROwen    Move Stop button after Modify, as per ticket #1735.
    2014-06-17 ROwen    Cosmetic fix: BaseParameterWdgSet.build constructed a variable keyVar that wasn't a KeyVar;
                        fortunately it was never used.
    2014-06-20 ROwen    Added support for fake stages.
    2014-06-23 ROwen    Added support for parameters associated with more than one stage;
                        CommandWdgSet takes stageStr and parameterList instead of stageList;
                        StageWdgSet no longer knows anything about parameters.
    2014-07-02 ROwen    Added survey mode display (actually plate type).
    2014-07-03 ROwen    Enhanced the survey mode display to show isCurrent and ? if unknown;
                        fixed a bug that caused a traceback if survey[0] == None.
    2014-08-29 ROwen    Added paramWidth argument and changed default parameter width from 10 to 6.
                        Tweaked the way stateWidth is handled to simplify overrides.
    2015-05-28 ROwen    Fix ticket 2375: the last two fields of cartridgeLoaded are None for engcam.
    2015-11-03 ROwen    Replace "== None" with "is None" and "!= None" with "is not None" to modernize the code.

CCLLAASSSSEESS
    RO.AddCallback.BaseMixin(__builtin__.object)
        ItemState
            ItemWdgSet(ItemState, RO.AddCallback.BaseMixin)
                BaseParameterWdgSet
                    CountParameterWdgSet
                    FloatParameterWdgSet
                    IntParameterWdgSet
                    OptionParameterWdgSet
                        PointingParameterWdgSet
                    StringParameterWdgSet
                CommandWdgSet
                    LoadCartridgeCommandWdgSetSet
                StageWdgSet
    Tkinter.Frame(Tkinter.Widget)
        TimerWdg
    __builtin__.object
        CmdInfo
        FakeStageWdgSet
    
    class BBaasseePPaarraammeetteerrWWddggSSeett(ItemWdgSet)
     |  An object representing a basic parameter for a SOP command stage
     |  
     |  Subclasses must override buildControlWdg and may want to override isDefault
     |  
     |  Method resolution order:
     |      BaseParameterWdgSet
     |      ItemWdgSet
     |      ItemState
     |      RO.AddCallback.BaseMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name, dispName=None, defValue=None, units=None, paramWidth=6, stateWidth=10, trackCurr=True, stageStr='', skipRows=0, startNewColumn=False, ctrlColSpan=None, ctrlSticky='w', helpText=None)
     |      Constructor
     |      
     |      Inputs:
     |      - name: name of parameter, as used in sop commands
     |      - dispName: displayed name (text for control widget); if None then use last field of name
     |      - defValue: default value for parameter
     |      - units: units of parameter (a string); if provided then self.unitsWdg is set to
     |          an RO.Wdg.StrLabel containing the string; otherwise None
     |      - paramWidth: width of parameter widget
     |      - stateWidth: width of state widget
     |      - trackCurrent: if True then display current value
     |      - stageStr: a string of one or more space-separated stage names; if not empty
     |          then the parameter will only be visible if any of the specified stages is visible
     |      - skipRows: number of rows to skip before displaying
     |      - startNewColumn: if True then display parameter in a new column (then skip skipRows before gridding)
     |      - ctrlColSpan: column span for data entry widget; if None then the value is computed
     |      - ctrlSticky: sticky for data entry widget
     |      - helpText: help text for entry widget; if None then a default is generated
     |  
     |  bbuuiilldd(self, master, callFunc=None, helpURL=None)
     |      Finish building the widget, including constructing wdgSet.
     |      
     |      Warning: must call before using the object!
     |      
     |      Inputs:
     |      - master: master widget for stateWdg
     |      - callFunc: callback function for state changes
     |      - helpURL: URL of help file
     |      
     |      self.stateWdg and self.controlWdg are the stage widgets
     |      self.parameterList contains a list of parameters (including parameter widgets).
     |  
     |  eennaabblleeWWddgg(self, dumWdg=None)
     |  
     |  ggeettCCmmddSSttrr(self)
     |      Return a portion of a command string for this parameter
     |  
     |  ggrriiddFFoorrggeettWWddgg(self)
     |      grid_forget all widgets.
     |  
     |  ggrriiddWWddgg(self, startingRow, startingCol)
     |      Grid the widgets starting at the specified startingRow and startingCol
     |      
     |      Return the next startingRow and startingCol
     |  
     |  rreeggrriiddWWddgg(self)
     |  
     |  rreessttoorreeCCuurrrreenntt(self, dumWdg=None)
     |      Restore parameter to current state.
     |  
     |  rreessttoorreeDDeeffaauulltt(self, dumWdg=None)
     |      Restore paraemter to default state.
     |  
     |  sseettEEnnaabbllee(self, doEnable)
     |      Enable or disable the control widgets
     |  
     |  uunnggrriiddWWddgg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  iissCCuurrrreenntt
     |      Does value of parameter match most current command?
     |  
     |  iissDDeeffaauulltt
     |      Does value of parameter match most current command?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ItemWdgSet:
     |  
     |  ____ssttrr____(self)
     |  
     |  sseettSSttaattee(self, state, isCurrent=True)
     |      Set the state of this item
     |      
     |      Inputs:
     |      - state: desired state for object
     |      - text: new text; if None then left unchanged
     |      
     |      @raise RuntimeError if called after state is done
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ItemState:
     |  
     |  ddiiddFFaaiill
     |      Did this stage of the sop command fail?
     |  
     |  iissDDoonnee
     |      Is this object finished (whether successfully or not)?
     |  
     |  iissRRuunnnniinngg
     |      Is this object running normally?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ItemState:
     |  
     |  DDiissaabblleeddSSttaatteess = set(['off'])
     |  
     |  DDoonneeSSttaatteess = set(['aborted', 'done', 'failed', 'idle', 'off'])
     |  
     |  EErrrroorrSSttaatteess = set(['failed'])
     |  
     |  RRuunnnniinnggSSttaatteess = set(['prepping', 'running', 'starting'])
     |  
     |  VVaalliiddSSttaatteess = set([None, 'aborted', 'done', 'failed', 'idle', 'off', ....
     |  
     |  WWaarrnniinnggSSttaatteess = set(['aborted'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RO.AddCallback.BaseMixin:
     |  
     |  aaddddCCaallllbbaacckk(self, callFunc, callNow=None)
     |      Add a callback function to the list.
     |      
     |      If the callback is already present, it is not re-added.
     |      
     |      Inputs:
     |      - callFunc  a callback function.
     |          It will receive one argument: self (the object doing the calling);
     |          If None, no callback function is added.
     |      - callNow   if True, calls the function immediately
     |                  if omitted or None, the default is used
     |      
     |      Raises ValueError if callFunc is not callable
     |  
     |  ccaallllbbaacckkssEEnnaabblleedd(self)
     |      Are callbacks enabled?
     |      
     |      False if executing callbacks (and possibly other reasons if using _disableCallbacksContext).
     |  
     |  rreemmoovveeCCaallllbbaacckk(self, callFunc, doRaise=True)
     |      Delete the callback function.
     |      
     |      Inputs:
     |      - callFunc  callback function to remove
     |      - doRaise   raise exception if unsuccessful? True by default.
     |      
     |      Return:
     |      - True if successful, raise error or return False otherwise.
     |      
     |      If doRaise true:
     |      - Raises ValueError if callback not found
     |      - Raises RuntimeError if executing callbacks when called
     |      Otherwise returns False in either case.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RO.AddCallback.BaseMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class CCmmddIInnffoo(__builtin__.object)
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, cmdVar=None, wdg=None)
     |  
     |  aabboorrtt(self)
     |  
     |  ddiissaabblleeIIffRRuunnnniinngg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ddiiddFFaaiill
     |  
     |  iissDDoonnee
     |  
     |  iissRRuunnnniinngg
    
    class CCoommmmaannddWWddggSSeett(ItemWdgSet)
     |  SOP command widget
     |  
     |  Useful fields (in addition to those listed for ItemWdgSet):
     |  - self.wdg: the command widget, including all sub-widgets
     |  
     |  Method resolution order:
     |      CommandWdgSet
     |      ItemWdgSet
     |      ItemState
     |      RO.AddCallback.BaseMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name, dispName=None, parameterList=(), realStageStr='', fakeStageStr='', actor='sop', canAbort=True, abortCmdStr=None)
     |      Construct a partial CommandWdgSet. Call build to finish the job.
     |      
     |      Inputs:
     |      - name: name of command, stage or parameter as used in sop commands
     |      - dispName: displayed name (text for control widget); if None then use last field of name
     |      - parameterList: a list of Parameters for this command
     |      - realStageStr: a string containing space-separated names of real stages
     |      - fakeStageStr: a string containing space-separated names of fake stages, e.g. "bias dark cleanup";
     |          fake stages are stages that cannot be disabled, and which STUI should not show a state field for,
     |          but for which sop still wants to output state in the <command>State keyword)
     |      - actor: name of actor to which to send commands
     |      - canAbort: if True then command can be aborted
     |      - abortCmdStr: command string to abort command; if None then the default "name abort" is used
     |      
     |      If realStateStr and fakeStageStr are both empty then one fake stage is constructed: fakeStageStr=name
     |  
     |  bbuuiilldd(self, master, msgBar, statusBar, callFunc=None, helpURL=None)
     |      Finish building the widget, including stage and parameter widgets.
     |      
     |      Warning: must call before using the object!
     |      
     |      Inputs:
     |      - master: master widget for stateWdg
     |      - msgBar: message bar widget, for displaying state strings
     |      - statusBar: status bar widget, for executing commands
     |      - callFunc: callback function for state changes
     |      - helpURL: URL of help file
     |  
     |  ddooAAbboorrtt(self, wdg=None)
     |      Abort the command
     |  
     |  ddooCCmmdd(self, cmdStr, wdg=None)
     |      Run the specified command
     |      
     |      Inputs:
     |      - cmdStr: command string
     |      - wdg: widget that started the command (to disable it while the command runs); None if no widget
     |  
     |  ddooSSttaarrtt(self, wdg=None)
     |      Start or modify the command
     |  
     |  ddooSSttoopp(self, wdg=None)
     |      Stop the command
     |  
     |  eennaabblleeWWddgg(self, dumWdg=None)
     |      Enable widgets according to current state
     |  
     |  ggeettCCmmddSSttrr(self)
     |      Return the command string for the current settings
     |  
     |  rreessttoorreeCCuurrrreenntt(self, dumWdg=None)
     |      Restore current parameters
     |      
     |      WARNING: it may be better to restore defaults for hidden stages,
     |      or restore defaults for all, then restore current afterwards.
     |      On the other hand, maybe that's what restoreCurrent should do anyway.
     |  
     |  rreessttoorreeDDeeffaauulltt(self, dumWdg=None)
     |      Restore default stages and parameters
     |  
     |  sseettWWddggCCoonntteexxtt(*args, **kwds)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  iissCCuurrrreenntt
     |      Does the state of the control widgets match the state of the sop command?
     |  
     |  iissDDeeffaauulltt
     |      Is the control widget set to its default state?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ItemWdgSet:
     |  
     |  ____ssttrr____(self)
     |  
     |  sseettSSttaattee(self, state, isCurrent=True)
     |      Set the state of this item
     |      
     |      Inputs:
     |      - state: desired state for object
     |      - text: new text; if None then left unchanged
     |      
     |      @raise RuntimeError if called after state is done
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ItemState:
     |  
     |  ddiiddFFaaiill
     |      Did this stage of the sop command fail?
     |  
     |  iissDDoonnee
     |      Is this object finished (whether successfully or not)?
     |  
     |  iissRRuunnnniinngg
     |      Is this object running normally?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ItemState:
     |  
     |  DDiissaabblleeddSSttaatteess = set(['off'])
     |  
     |  DDoonneeSSttaatteess = set(['aborted', 'done', 'failed', 'idle', 'off'])
     |  
     |  EErrrroorrSSttaatteess = set(['failed'])
     |  
     |  RRuunnnniinnggSSttaatteess = set(['prepping', 'running', 'starting'])
     |  
     |  VVaalliiddSSttaatteess = set([None, 'aborted', 'done', 'failed', 'idle', 'off', ....
     |  
     |  WWaarrnniinnggSSttaatteess = set(['aborted'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RO.AddCallback.BaseMixin:
     |  
     |  aaddddCCaallllbbaacckk(self, callFunc, callNow=None)
     |      Add a callback function to the list.
     |      
     |      If the callback is already present, it is not re-added.
     |      
     |      Inputs:
     |      - callFunc  a callback function.
     |          It will receive one argument: self (the object doing the calling);
     |          If None, no callback function is added.
     |      - callNow   if True, calls the function immediately
     |                  if omitted or None, the default is used
     |      
     |      Raises ValueError if callFunc is not callable
     |  
     |  ccaallllbbaacckkssEEnnaabblleedd(self)
     |      Are callbacks enabled?
     |      
     |      False if executing callbacks (and possibly other reasons if using _disableCallbacksContext).
     |  
     |  rreemmoovveeCCaallllbbaacckk(self, callFunc, doRaise=True)
     |      Delete the callback function.
     |      
     |      Inputs:
     |      - callFunc  callback function to remove
     |      - doRaise   raise exception if unsuccessful? True by default.
     |      
     |      Return:
     |      - True if successful, raise error or return False otherwise.
     |      
     |      If doRaise true:
     |      - Raises ValueError if callback not found
     |      - Raises RuntimeError if executing callbacks when called
     |      Otherwise returns False in either case.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RO.AddCallback.BaseMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class CCoouunnttPPaarraammeetteerrWWddggSSeett(BaseParameterWdgSet)
     |  An object representing a count; the state shows N of M
     |  
     |  Method resolution order:
     |      CountParameterWdgSet
     |      BaseParameterWdgSet
     |      ItemWdgSet
     |      ItemState
     |      RO.AddCallback.BaseMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name, dispName=None, defValue=None, paramWidth=3, trackCurr=True, stageStr='', skipRows=0, startNewColumn=False, ctrlColSpan=None, ctrlSticky='w', helpText=None, stateWidth=None)
     |      Constructor
     |      
     |      Inputs:
     |      - name: name of parameter, as used in sop commands
     |      - dispName: displayed name (text for control widget); if None then use last field of name
     |      - defValue: default value for parameter
     |      - units: units of parameter (a string); if provided then self.unitsWdg is set to
     |          an RO.Wdg.StrLabel containing the string; otherwise None
     |      - trackCurrent: if True then display current value
     |      - stageStr: a string of one or more space-separated stage names; if not empty
     |          then the parameter will only be visible if any of the specified stages is visible
     |      - skipRows: number of rows to skip before displaying
     |      - startNewColumn: if True then display parameter in a new column (then skip skipRows before gridding)
     |      - ctrlColSpan: column span for data entry widget; if None then the value is computed
     |      - ctrlSticky: sticky for data entry widget
     |      - helpText: help text for entry widget; if None then a default is generated
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  iissDDeeffaauulltt
     |      Does value of parameter match most current command?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseParameterWdgSet:
     |  
     |  bbuuiilldd(self, master, callFunc=None, helpURL=None)
     |      Finish building the widget, including constructing wdgSet.
     |      
     |      Warning: must call before using the object!
     |      
     |      Inputs:
     |      - master: master widget for stateWdg
     |      - callFunc: callback function for state changes
     |      - helpURL: URL of help file
     |      
     |      self.stateWdg and self.controlWdg are the stage widgets
     |      self.parameterList contains a list of parameters (including parameter widgets).
     |  
     |  eennaabblleeWWddgg(self, dumWdg=None)
     |  
     |  ggeettCCmmddSSttrr(self)
     |      Return a portion of a command string for this parameter
     |  
     |  ggrriiddFFoorrggeettWWddgg(self)
     |      grid_forget all widgets.
     |  
     |  ggrriiddWWddgg(self, startingRow, startingCol)
     |      Grid the widgets starting at the specified startingRow and startingCol
     |      
     |      Return the next startingRow and startingCol
     |  
     |  rreeggrriiddWWddgg(self)
     |  
     |  rreessttoorreeCCuurrrreenntt(self, dumWdg=None)
     |      Restore parameter to current state.
     |  
     |  rreessttoorreeDDeeffaauulltt(self, dumWdg=None)
     |      Restore paraemter to default state.
     |  
     |  sseettEEnnaabbllee(self, doEnable)
     |      Enable or disable the control widgets
     |  
     |  uunnggrriiddWWddgg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseParameterWdgSet:
     |  
     |  iissCCuurrrreenntt
     |      Does value of parameter match most current command?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ItemWdgSet:
     |  
     |  ____ssttrr____(self)
     |  
     |  sseettSSttaattee(self, state, isCurrent=True)
     |      Set the state of this item
     |      
     |      Inputs:
     |      - state: desired state for object
     |      - text: new text; if None then left unchanged
     |      
     |      @raise RuntimeError if called after state is done
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ItemState:
     |  
     |  ddiiddFFaaiill
     |      Did this stage of the sop command fail?
     |  
     |  iissDDoonnee
     |      Is this object finished (whether successfully or not)?
     |  
     |  iissRRuunnnniinngg
     |      Is this object running normally?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ItemState:
     |  
     |  DDiissaabblleeddSSttaatteess = set(['off'])
     |  
     |  DDoonneeSSttaatteess = set(['aborted', 'done', 'failed', 'idle', 'off'])
     |  
     |  EErrrroorrSSttaatteess = set(['failed'])
     |  
     |  RRuunnnniinnggSSttaatteess = set(['prepping', 'running', 'starting'])
     |  
     |  VVaalliiddSSttaatteess = set([None, 'aborted', 'done', 'failed', 'idle', 'off', ....
     |  
     |  WWaarrnniinnggSSttaatteess = set(['aborted'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RO.AddCallback.BaseMixin:
     |  
     |  aaddddCCaallllbbaacckk(self, callFunc, callNow=None)
     |      Add a callback function to the list.
     |      
     |      If the callback is already present, it is not re-added.
     |      
     |      Inputs:
     |      - callFunc  a callback function.
     |          It will receive one argument: self (the object doing the calling);
     |          If None, no callback function is added.
     |      - callNow   if True, calls the function immediately
     |                  if omitted or None, the default is used
     |      
     |      Raises ValueError if callFunc is not callable
     |  
     |  ccaallllbbaacckkssEEnnaabblleedd(self)
     |      Are callbacks enabled?
     |      
     |      False if executing callbacks (and possibly other reasons if using _disableCallbacksContext).
     |  
     |  rreemmoovveeCCaallllbbaacckk(self, callFunc, doRaise=True)
     |      Delete the callback function.
     |      
     |      Inputs:
     |      - callFunc  callback function to remove
     |      - doRaise   raise exception if unsuccessful? True by default.
     |      
     |      Return:
     |      - True if successful, raise error or return False otherwise.
     |      
     |      If doRaise true:
     |      - Raises ValueError if callback not found
     |      - Raises RuntimeError if executing callbacks when called
     |      Otherwise returns False in either case.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RO.AddCallback.BaseMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class FFaakkeeSSttaaggeeWWddggSSeett(__builtin__.object)
     |  An object representing a fake SOP command stage
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name)
     |  
     |  bbuuiilldd(self, *args, **kwargs)
     |  
     |  eennaabblleeWWddgg(self, controlWdg=None)
     |  
     |  ggeettCCmmddSSttrr(self)
     |  
     |  iissCCuurrrreenntt(self)
     |  
     |  iissDDeeffaauulltt(self)
     |  
     |  rreessttoorreeCCuurrrreenntt(self, dumWdg=None)
     |  
     |  rreessttoorreeDDeeffaauulltt(self, dumWdg=None)
     |  
     |  sseettSSttaattee(self, state, isCurrent=True)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class FFllooaattPPaarraammeetteerrWWddggSSeett(BaseParameterWdgSet)
     |  An object representing an floating point parameter for a SOP command stage
     |  
     |  Method resolution order:
     |      FloatParameterWdgSet
     |      BaseParameterWdgSet
     |      ItemWdgSet
     |      ItemState
     |      RO.AddCallback.BaseMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name, dispName=None, defValue=None, units=None, paramWidth=6, trackCurr=True, stageStr='', skipRows=0, startNewColumn=False, ctrlColSpan=None, ctrlSticky='w', helpText=None, defFormat='%0.1f', epsilon=1e-05)
     |      Constructor
     |      
     |      Inputs:
     |      - name: name of parameter, as used in sop commands
     |      - dispName: displayed name (text for control widget); if None then use last field of name
     |      - defValue: default value for parameter
     |      - units: units of parameter (a string); if provided then self.unitsWdg is set to
     |          an RO.Wdg.StrLabel containing the string; otherwise None
     |      - trackCurrent: if True then display current value
     |      - stageStr: a string of one or more space-separated stage names; if not empty
     |          then the parameter will only be visible if any of the specified stages is visible
     |      - skipRows: number of rows to skip before displaying
     |      - startNewColumn: if True then display parameter in a new column (then skip skipRows before gridding)
     |      - ctrlColSpan: column span for data entry widget; if None then the value is computed
     |      - ctrlSticky: sticky for data entry widget
     |      - helpText: help text for entry widget; if None then a default is generated
     |      - defFormat default format used when converting numbers to strings
     |      - epsilon: values that match to within epsilon are considered identical
     |          for purposes of detecting isDefault
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  iissDDeeffaauulltt
     |      Does value of parameter match most current command?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseParameterWdgSet:
     |  
     |  bbuuiilldd(self, master, callFunc=None, helpURL=None)
     |      Finish building the widget, including constructing wdgSet.
     |      
     |      Warning: must call before using the object!
     |      
     |      Inputs:
     |      - master: master widget for stateWdg
     |      - callFunc: callback function for state changes
     |      - helpURL: URL of help file
     |      
     |      self.stateWdg and self.controlWdg are the stage widgets
     |      self.parameterList contains a list of parameters (including parameter widgets).
     |  
     |  eennaabblleeWWddgg(self, dumWdg=None)
     |  
     |  ggeettCCmmddSSttrr(self)
     |      Return a portion of a command string for this parameter
     |  
     |  ggrriiddFFoorrggeettWWddgg(self)
     |      grid_forget all widgets.
     |  
     |  ggrriiddWWddgg(self, startingRow, startingCol)
     |      Grid the widgets starting at the specified startingRow and startingCol
     |      
     |      Return the next startingRow and startingCol
     |  
     |  rreeggrriiddWWddgg(self)
     |  
     |  rreessttoorreeCCuurrrreenntt(self, dumWdg=None)
     |      Restore parameter to current state.
     |  
     |  rreessttoorreeDDeeffaauulltt(self, dumWdg=None)
     |      Restore paraemter to default state.
     |  
     |  sseettEEnnaabbllee(self, doEnable)
     |      Enable or disable the control widgets
     |  
     |  uunnggrriiddWWddgg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseParameterWdgSet:
     |  
     |  iissCCuurrrreenntt
     |      Does value of parameter match most current command?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ItemWdgSet:
     |  
     |  ____ssttrr____(self)
     |  
     |  sseettSSttaattee(self, state, isCurrent=True)
     |      Set the state of this item
     |      
     |      Inputs:
     |      - state: desired state for object
     |      - text: new text; if None then left unchanged
     |      
     |      @raise RuntimeError if called after state is done
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ItemState:
     |  
     |  ddiiddFFaaiill
     |      Did this stage of the sop command fail?
     |  
     |  iissDDoonnee
     |      Is this object finished (whether successfully or not)?
     |  
     |  iissRRuunnnniinngg
     |      Is this object running normally?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ItemState:
     |  
     |  DDiissaabblleeddSSttaatteess = set(['off'])
     |  
     |  DDoonneeSSttaatteess = set(['aborted', 'done', 'failed', 'idle', 'off'])
     |  
     |  EErrrroorrSSttaatteess = set(['failed'])
     |  
     |  RRuunnnniinnggSSttaatteess = set(['prepping', 'running', 'starting'])
     |  
     |  VVaalliiddSSttaatteess = set([None, 'aborted', 'done', 'failed', 'idle', 'off', ....
     |  
     |  WWaarrnniinnggSSttaatteess = set(['aborted'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RO.AddCallback.BaseMixin:
     |  
     |  aaddddCCaallllbbaacckk(self, callFunc, callNow=None)
     |      Add a callback function to the list.
     |      
     |      If the callback is already present, it is not re-added.
     |      
     |      Inputs:
     |      - callFunc  a callback function.
     |          It will receive one argument: self (the object doing the calling);
     |          If None, no callback function is added.
     |      - callNow   if True, calls the function immediately
     |                  if omitted or None, the default is used
     |      
     |      Raises ValueError if callFunc is not callable
     |  
     |  ccaallllbbaacckkssEEnnaabblleedd(self)
     |      Are callbacks enabled?
     |      
     |      False if executing callbacks (and possibly other reasons if using _disableCallbacksContext).
     |  
     |  rreemmoovveeCCaallllbbaacckk(self, callFunc, doRaise=True)
     |      Delete the callback function.
     |      
     |      Inputs:
     |      - callFunc  callback function to remove
     |      - doRaise   raise exception if unsuccessful? True by default.
     |      
     |      Return:
     |      - True if successful, raise error or return False otherwise.
     |      
     |      If doRaise true:
     |      - Raises ValueError if callback not found
     |      - Raises RuntimeError if executing callbacks when called
     |      Otherwise returns False in either case.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RO.AddCallback.BaseMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class IInnttPPaarraammeetteerrWWddggSSeett(BaseParameterWdgSet)
     |  An object representing an integer parameter for a SOP command stage
     |  
     |  Method resolution order:
     |      IntParameterWdgSet
     |      BaseParameterWdgSet
     |      ItemWdgSet
     |      ItemState
     |      RO.AddCallback.BaseMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name, dispName=None, defValue=None, units=None, paramWidth=6, trackCurr=True, stageStr='', skipRows=0, startNewColumn=False, ctrlColSpan=None, ctrlSticky='w', helpText=None)
     |      Constructor
     |      
     |      Inputs:
     |      - name: name of parameter, as used in sop commands
     |      - dispName: displayed name (text for control widget); if None then use last field of name
     |      - defValue: default value for parameter
     |      - units: units of parameter (a string); if provided then self.unitsWdg is set to
     |          an RO.Wdg.StrLabel containing the string; otherwise None
     |      - trackCurrent: if True then display current value
     |      - stageStr: a string of one or more space-separated stage names; if not empty
     |          then the parameter will only be visible if any of the specified stages is visible
     |      - skipRows: number of rows to skip before displaying
     |      - startNewColumn: if True then display parameter in a new column (then skip skipRows before gridding)
     |      - ctrlColSpan: column span for data entry widget; if None then the value is computed
     |      - ctrlSticky: sticky for data entry widget
     |      - helpText: help text for entry widget; if None then a default is generated
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseParameterWdgSet:
     |  
     |  bbuuiilldd(self, master, callFunc=None, helpURL=None)
     |      Finish building the widget, including constructing wdgSet.
     |      
     |      Warning: must call before using the object!
     |      
     |      Inputs:
     |      - master: master widget for stateWdg
     |      - callFunc: callback function for state changes
     |      - helpURL: URL of help file
     |      
     |      self.stateWdg and self.controlWdg are the stage widgets
     |      self.parameterList contains a list of parameters (including parameter widgets).
     |  
     |  eennaabblleeWWddgg(self, dumWdg=None)
     |  
     |  ggeettCCmmddSSttrr(self)
     |      Return a portion of a command string for this parameter
     |  
     |  ggrriiddFFoorrggeettWWddgg(self)
     |      grid_forget all widgets.
     |  
     |  ggrriiddWWddgg(self, startingRow, startingCol)
     |      Grid the widgets starting at the specified startingRow and startingCol
     |      
     |      Return the next startingRow and startingCol
     |  
     |  rreeggrriiddWWddgg(self)
     |  
     |  rreessttoorreeCCuurrrreenntt(self, dumWdg=None)
     |      Restore parameter to current state.
     |  
     |  rreessttoorreeDDeeffaauulltt(self, dumWdg=None)
     |      Restore paraemter to default state.
     |  
     |  sseettEEnnaabbllee(self, doEnable)
     |      Enable or disable the control widgets
     |  
     |  uunnggrriiddWWddgg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseParameterWdgSet:
     |  
     |  iissCCuurrrreenntt
     |      Does value of parameter match most current command?
     |  
     |  iissDDeeffaauulltt
     |      Does value of parameter match most current command?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ItemWdgSet:
     |  
     |  ____ssttrr____(self)
     |  
     |  sseettSSttaattee(self, state, isCurrent=True)
     |      Set the state of this item
     |      
     |      Inputs:
     |      - state: desired state for object
     |      - text: new text; if None then left unchanged
     |      
     |      @raise RuntimeError if called after state is done
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ItemState:
     |  
     |  ddiiddFFaaiill
     |      Did this stage of the sop command fail?
     |  
     |  iissDDoonnee
     |      Is this object finished (whether successfully or not)?
     |  
     |  iissRRuunnnniinngg
     |      Is this object running normally?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ItemState:
     |  
     |  DDiissaabblleeddSSttaatteess = set(['off'])
     |  
     |  DDoonneeSSttaatteess = set(['aborted', 'done', 'failed', 'idle', 'off'])
     |  
     |  EErrrroorrSSttaatteess = set(['failed'])
     |  
     |  RRuunnnniinnggSSttaatteess = set(['prepping', 'running', 'starting'])
     |  
     |  VVaalliiddSSttaatteess = set([None, 'aborted', 'done', 'failed', 'idle', 'off', ....
     |  
     |  WWaarrnniinnggSSttaatteess = set(['aborted'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RO.AddCallback.BaseMixin:
     |  
     |  aaddddCCaallllbbaacckk(self, callFunc, callNow=None)
     |      Add a callback function to the list.
     |      
     |      If the callback is already present, it is not re-added.
     |      
     |      Inputs:
     |      - callFunc  a callback function.
     |          It will receive one argument: self (the object doing the calling);
     |          If None, no callback function is added.
     |      - callNow   if True, calls the function immediately
     |                  if omitted or None, the default is used
     |      
     |      Raises ValueError if callFunc is not callable
     |  
     |  ccaallllbbaacckkssEEnnaabblleedd(self)
     |      Are callbacks enabled?
     |      
     |      False if executing callbacks (and possibly other reasons if using _disableCallbacksContext).
     |  
     |  rreemmoovveeCCaallllbbaacckk(self, callFunc, doRaise=True)
     |      Delete the callback function.
     |      
     |      Inputs:
     |      - callFunc  callback function to remove
     |      - doRaise   raise exception if unsuccessful? True by default.
     |      
     |      Return:
     |      - True if successful, raise error or return False otherwise.
     |      
     |      If doRaise true:
     |      - Raises ValueError if callback not found
     |      - Raises RuntimeError if executing callbacks when called
     |      Otherwise returns False in either case.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RO.AddCallback.BaseMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class IItteemmSSttaattee(RO.AddCallback.BaseMixin)
     |  Keep track of the state of an item
     |  
     |  Callback functions are called when the state changes.
     |  
     |  Method resolution order:
     |      ItemState
     |      RO.AddCallback.BaseMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name='', callFunc=None, callNow=False)
     |      Constructor
     |  
     |  ____ssttrr____(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ddiiddFFaaiill
     |      Did this stage of the sop command fail?
     |  
     |  iissDDoonnee
     |      Is this object finished (whether successfully or not)?
     |  
     |  iissRRuunnnniinngg
     |      Is this object running normally?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  DDiissaabblleeddSSttaatteess = set(['off'])
     |  
     |  DDoonneeSSttaatteess = set(['aborted', 'done', 'failed', 'idle', 'off'])
     |  
     |  EErrrroorrSSttaatteess = set(['failed'])
     |  
     |  RRuunnnniinnggSSttaatteess = set(['prepping', 'running', 'starting'])
     |  
     |  VVaalliiddSSttaatteess = set([None, 'aborted', 'done', 'failed', 'idle', 'off', ....
     |  
     |  WWaarrnniinnggSSttaatteess = set(['aborted'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RO.AddCallback.BaseMixin:
     |  
     |  aaddddCCaallllbbaacckk(self, callFunc, callNow=None)
     |      Add a callback function to the list.
     |      
     |      If the callback is already present, it is not re-added.
     |      
     |      Inputs:
     |      - callFunc  a callback function.
     |          It will receive one argument: self (the object doing the calling);
     |          If None, no callback function is added.
     |      - callNow   if True, calls the function immediately
     |                  if omitted or None, the default is used
     |      
     |      Raises ValueError if callFunc is not callable
     |  
     |  ccaallllbbaacckkssEEnnaabblleedd(self)
     |      Are callbacks enabled?
     |      
     |      False if executing callbacks (and possibly other reasons if using _disableCallbacksContext).
     |  
     |  rreemmoovveeCCaallllbbaacckk(self, callFunc, doRaise=True)
     |      Delete the callback function.
     |      
     |      Inputs:
     |      - callFunc  callback function to remove
     |      - doRaise   raise exception if unsuccessful? True by default.
     |      
     |      Return:
     |      - True if successful, raise error or return False otherwise.
     |      
     |      If doRaise true:
     |      - Raises ValueError if callback not found
     |      - Raises RuntimeError if executing callbacks when called
     |      Otherwise returns False in either case.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RO.AddCallback.BaseMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class IItteemmWWddggSSeett(ItemState, RO.AddCallback.BaseMixin)
     |  Widget showing state of SOP command, stage, or parameter
     |  
     |  Subclasses must override:
     |  enableWdg
     |  and must grid or pack:
     |  self.stateWdg
     |  plus any other widgets it wants
     |  
     |  Useful fields:
     |  - name: name of command, stage or parameter as used in sop commands
     |  - dispName: display name
     |  - fullName: full dotted name (command.stage.parameter); computed later
     |  
     |  Method resolution order:
     |      ItemWdgSet
     |      ItemState
     |      RO.AddCallback.BaseMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name, dispName=None)
     |      Construct a partial ItemStateWdg. Call build to finish the job.
     |      
     |      Inputs:
     |      - name: name of command, stage or parameter as used in sop commands
     |      - dispName: displayed name (text for control widget); if None then use name
     |          with a space inserted before each run of capital letters (at least approx.)
     |  
     |  ____ssttrr____(self)
     |  
     |  bbuuiilldd(self, master, typeName, stateWidth=10, callFunc=None, helpURL=None)
     |      Finish building the widget, including constructing wdgSet.
     |      
     |      Warning: must call before using the object!
     |      
     |      Inputs:
     |      - master: master widget for stateWdg
     |      - typeName: one of "command", "stage" or "parameter"; used for stateWdg's help string
     |      - stateWidth: width of state widget
     |      - callFunc: callback function for state changes
     |      - helpURL: URL of help file
     |  
     |  eennaabblleeWWddgg(self, dumWdg=None)
     |      Enable widget based on current state
     |      
     |      If only CommandWdgSet wants this, then probably better to make it
     |      a callback function that Command explicitly issues.
     |  
     |  sseettSSttaattee(self, state, isCurrent=True)
     |      Set the state of this item
     |      
     |      Inputs:
     |      - state: desired state for object
     |      - text: new text; if None then left unchanged
     |      
     |      @raise RuntimeError if called after state is done
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  iissCCuurrrreenntt
     |      Does the state of the control widget match the state of the sop command?
     |  
     |  iissDDeeffaauulltt
     |      Is the control widget set to its default state?
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ItemState:
     |  
     |  ddiiddFFaaiill
     |      Did this stage of the sop command fail?
     |  
     |  iissDDoonnee
     |      Is this object finished (whether successfully or not)?
     |  
     |  iissRRuunnnniinngg
     |      Is this object running normally?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ItemState:
     |  
     |  DDiissaabblleeddSSttaatteess = set(['off'])
     |  
     |  DDoonneeSSttaatteess = set(['aborted', 'done', 'failed', 'idle', 'off'])
     |  
     |  EErrrroorrSSttaatteess = set(['failed'])
     |  
     |  RRuunnnniinnggSSttaatteess = set(['prepping', 'running', 'starting'])
     |  
     |  VVaalliiddSSttaatteess = set([None, 'aborted', 'done', 'failed', 'idle', 'off', ....
     |  
     |  WWaarrnniinnggSSttaatteess = set(['aborted'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RO.AddCallback.BaseMixin:
     |  
     |  aaddddCCaallllbbaacckk(self, callFunc, callNow=None)
     |      Add a callback function to the list.
     |      
     |      If the callback is already present, it is not re-added.
     |      
     |      Inputs:
     |      - callFunc  a callback function.
     |          It will receive one argument: self (the object doing the calling);
     |          If None, no callback function is added.
     |      - callNow   if True, calls the function immediately
     |                  if omitted or None, the default is used
     |      
     |      Raises ValueError if callFunc is not callable
     |  
     |  ccaallllbbaacckkssEEnnaabblleedd(self)
     |      Are callbacks enabled?
     |      
     |      False if executing callbacks (and possibly other reasons if using _disableCallbacksContext).
     |  
     |  rreemmoovveeCCaallllbbaacckk(self, callFunc, doRaise=True)
     |      Delete the callback function.
     |      
     |      Inputs:
     |      - callFunc  callback function to remove
     |      - doRaise   raise exception if unsuccessful? True by default.
     |      
     |      Return:
     |      - True if successful, raise error or return False otherwise.
     |      
     |      If doRaise true:
     |      - Raises ValueError if callback not found
     |      - Raises RuntimeError if executing callbacks when called
     |      Otherwise returns False in either case.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RO.AddCallback.BaseMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class LLooaaddCCaarrttrriiddggeeCCoommmmaannddWWddggSSeettSSeett(CommandWdgSet)
     |  Guider load cartridge command widget set
     |  
     |  Method resolution order:
     |      LoadCartridgeCommandWdgSetSet
     |      CommandWdgSet
     |      ItemWdgSet
     |      ItemState
     |      RO.AddCallback.BaseMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self)
     |      Create a LoadCartridgeCommandWdgSet
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from CommandWdgSet:
     |  
     |  bbuuiilldd(self, master, msgBar, statusBar, callFunc=None, helpURL=None)
     |      Finish building the widget, including stage and parameter widgets.
     |      
     |      Warning: must call before using the object!
     |      
     |      Inputs:
     |      - master: master widget for stateWdg
     |      - msgBar: message bar widget, for displaying state strings
     |      - statusBar: status bar widget, for executing commands
     |      - callFunc: callback function for state changes
     |      - helpURL: URL of help file
     |  
     |  ddooAAbboorrtt(self, wdg=None)
     |      Abort the command
     |  
     |  ddooCCmmdd(self, cmdStr, wdg=None)
     |      Run the specified command
     |      
     |      Inputs:
     |      - cmdStr: command string
     |      - wdg: widget that started the command (to disable it while the command runs); None if no widget
     |  
     |  ddooSSttaarrtt(self, wdg=None)
     |      Start or modify the command
     |  
     |  ddooSSttoopp(self, wdg=None)
     |      Stop the command
     |  
     |  eennaabblleeWWddgg(self, dumWdg=None)
     |      Enable widgets according to current state
     |  
     |  ggeettCCmmddSSttrr(self)
     |      Return the command string for the current settings
     |  
     |  rreessttoorreeCCuurrrreenntt(self, dumWdg=None)
     |      Restore current parameters
     |      
     |      WARNING: it may be better to restore defaults for hidden stages,
     |      or restore defaults for all, then restore current afterwards.
     |      On the other hand, maybe that's what restoreCurrent should do anyway.
     |  
     |  rreessttoorreeDDeeffaauulltt(self, dumWdg=None)
     |      Restore default stages and parameters
     |  
     |  sseettWWddggCCoonntteexxtt(*args, **kwds)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from CommandWdgSet:
     |  
     |  iissCCuurrrreenntt
     |      Does the state of the control widgets match the state of the sop command?
     |  
     |  iissDDeeffaauulltt
     |      Is the control widget set to its default state?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ItemWdgSet:
     |  
     |  ____ssttrr____(self)
     |  
     |  sseettSSttaattee(self, state, isCurrent=True)
     |      Set the state of this item
     |      
     |      Inputs:
     |      - state: desired state for object
     |      - text: new text; if None then left unchanged
     |      
     |      @raise RuntimeError if called after state is done
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ItemState:
     |  
     |  ddiiddFFaaiill
     |      Did this stage of the sop command fail?
     |  
     |  iissDDoonnee
     |      Is this object finished (whether successfully or not)?
     |  
     |  iissRRuunnnniinngg
     |      Is this object running normally?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ItemState:
     |  
     |  DDiissaabblleeddSSttaatteess = set(['off'])
     |  
     |  DDoonneeSSttaatteess = set(['aborted', 'done', 'failed', 'idle', 'off'])
     |  
     |  EErrrroorrSSttaatteess = set(['failed'])
     |  
     |  RRuunnnniinnggSSttaatteess = set(['prepping', 'running', 'starting'])
     |  
     |  VVaalliiddSSttaatteess = set([None, 'aborted', 'done', 'failed', 'idle', 'off', ....
     |  
     |  WWaarrnniinnggSSttaatteess = set(['aborted'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RO.AddCallback.BaseMixin:
     |  
     |  aaddddCCaallllbbaacckk(self, callFunc, callNow=None)
     |      Add a callback function to the list.
     |      
     |      If the callback is already present, it is not re-added.
     |      
     |      Inputs:
     |      - callFunc  a callback function.
     |          It will receive one argument: self (the object doing the calling);
     |          If None, no callback function is added.
     |      - callNow   if True, calls the function immediately
     |                  if omitted or None, the default is used
     |      
     |      Raises ValueError if callFunc is not callable
     |  
     |  ccaallllbbaacckkssEEnnaabblleedd(self)
     |      Are callbacks enabled?
     |      
     |      False if executing callbacks (and possibly other reasons if using _disableCallbacksContext).
     |  
     |  rreemmoovveeCCaallllbbaacckk(self, callFunc, doRaise=True)
     |      Delete the callback function.
     |      
     |      Inputs:
     |      - callFunc  callback function to remove
     |      - doRaise   raise exception if unsuccessful? True by default.
     |      
     |      Return:
     |      - True if successful, raise error or return False otherwise.
     |      
     |      If doRaise true:
     |      - Raises ValueError if callback not found
     |      - Raises RuntimeError if executing callbacks when called
     |      Otherwise returns False in either case.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RO.AddCallback.BaseMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class OOppttiioonnPPaarraammeetteerrWWddggSSeett(BaseParameterWdgSet)
     |  An object representing a set of options
     |  
     |  Method resolution order:
     |      OptionParameterWdgSet
     |      BaseParameterWdgSet
     |      ItemWdgSet
     |      ItemState
     |      RO.AddCallback.BaseMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name, dispName=None, defValue=None, trackCurr=True, stageStr='', skipRows=0, startNewColumn=False, ctrlColSpan=None, ctrlSticky='w', helpText=None, items=None)
     |      Constructor
     |      
     |      Inputs:
     |      - name: name of parameter, as used in sop commands
     |      - dispName: displayed name (text for control widget); if None then use last field of name
     |      - defValue: default value for parameter
     |      - trackCurrent: if True then display current value
     |      - stageStr: a string of one or more space-separated stage names; if not empty
     |          then the parameter will only be visible if any of the specified stages is visible
     |      - skipRows: number of rows to skip before displaying
     |      - startNewColumn: if True then display parameter in a new column (then skip skipRows before gridding)
     |      - ctrlColSpan: column span for data entry widget; if None then the value is computed
     |      - ctrlSticky: sticky for data entry widget
     |      - helpText: help text for entry widget; if None then a default is generated
     |      - items: list of options
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseParameterWdgSet:
     |  
     |  bbuuiilldd(self, master, callFunc=None, helpURL=None)
     |      Finish building the widget, including constructing wdgSet.
     |      
     |      Warning: must call before using the object!
     |      
     |      Inputs:
     |      - master: master widget for stateWdg
     |      - callFunc: callback function for state changes
     |      - helpURL: URL of help file
     |      
     |      self.stateWdg and self.controlWdg are the stage widgets
     |      self.parameterList contains a list of parameters (including parameter widgets).
     |  
     |  eennaabblleeWWddgg(self, dumWdg=None)
     |  
     |  ggeettCCmmddSSttrr(self)
     |      Return a portion of a command string for this parameter
     |  
     |  ggrriiddFFoorrggeettWWddgg(self)
     |      grid_forget all widgets.
     |  
     |  ggrriiddWWddgg(self, startingRow, startingCol)
     |      Grid the widgets starting at the specified startingRow and startingCol
     |      
     |      Return the next startingRow and startingCol
     |  
     |  rreeggrriiddWWddgg(self)
     |  
     |  rreessttoorreeCCuurrrreenntt(self, dumWdg=None)
     |      Restore parameter to current state.
     |  
     |  rreessttoorreeDDeeffaauulltt(self, dumWdg=None)
     |      Restore paraemter to default state.
     |  
     |  sseettEEnnaabbllee(self, doEnable)
     |      Enable or disable the control widgets
     |  
     |  uunnggrriiddWWddgg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseParameterWdgSet:
     |  
     |  iissCCuurrrreenntt
     |      Does value of parameter match most current command?
     |  
     |  iissDDeeffaauulltt
     |      Does value of parameter match most current command?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ItemWdgSet:
     |  
     |  ____ssttrr____(self)
     |  
     |  sseettSSttaattee(self, state, isCurrent=True)
     |      Set the state of this item
     |      
     |      Inputs:
     |      - state: desired state for object
     |      - text: new text; if None then left unchanged
     |      
     |      @raise RuntimeError if called after state is done
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ItemState:
     |  
     |  ddiiddFFaaiill
     |      Did this stage of the sop command fail?
     |  
     |  iissDDoonnee
     |      Is this object finished (whether successfully or not)?
     |  
     |  iissRRuunnnniinngg
     |      Is this object running normally?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ItemState:
     |  
     |  DDiissaabblleeddSSttaatteess = set(['off'])
     |  
     |  DDoonneeSSttaatteess = set(['aborted', 'done', 'failed', 'idle', 'off'])
     |  
     |  EErrrroorrSSttaatteess = set(['failed'])
     |  
     |  RRuunnnniinnggSSttaatteess = set(['prepping', 'running', 'starting'])
     |  
     |  VVaalliiddSSttaatteess = set([None, 'aborted', 'done', 'failed', 'idle', 'off', ....
     |  
     |  WWaarrnniinnggSSttaatteess = set(['aborted'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RO.AddCallback.BaseMixin:
     |  
     |  aaddddCCaallllbbaacckk(self, callFunc, callNow=None)
     |      Add a callback function to the list.
     |      
     |      If the callback is already present, it is not re-added.
     |      
     |      Inputs:
     |      - callFunc  a callback function.
     |          It will receive one argument: self (the object doing the calling);
     |          If None, no callback function is added.
     |      - callNow   if True, calls the function immediately
     |                  if omitted or None, the default is used
     |      
     |      Raises ValueError if callFunc is not callable
     |  
     |  ccaallllbbaacckkssEEnnaabblleedd(self)
     |      Are callbacks enabled?
     |      
     |      False if executing callbacks (and possibly other reasons if using _disableCallbacksContext).
     |  
     |  rreemmoovveeCCaallllbbaacckk(self, callFunc, doRaise=True)
     |      Delete the callback function.
     |      
     |      Inputs:
     |      - callFunc  callback function to remove
     |      - doRaise   raise exception if unsuccessful? True by default.
     |      
     |      Return:
     |      - True if successful, raise error or return False otherwise.
     |      
     |      If doRaise true:
     |      - Raises ValueError if callback not found
     |      - Raises RuntimeError if executing callbacks when called
     |      Otherwise returns False in either case.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RO.AddCallback.BaseMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class PPooiinnttiinnggPPaarraammeetteerrWWddggSSeett(OptionParameterWdgSet)
     |  Parameter widgets for displaying the current pointing and selecting a pointing (A or B)
     |  
     |  Method resolution order:
     |      PointingParameterWdgSet
     |      OptionParameterWdgSet
     |      BaseParameterWdgSet
     |      ItemWdgSet
     |      ItemState
     |      RO.AddCallback.BaseMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self)
     |      Constructor
     |  
     |  bbuuiilldd(self, master, callFunc=None, helpURL=None)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseParameterWdgSet:
     |  
     |  eennaabblleeWWddgg(self, dumWdg=None)
     |  
     |  ggeettCCmmddSSttrr(self)
     |      Return a portion of a command string for this parameter
     |  
     |  ggrriiddFFoorrggeettWWddgg(self)
     |      grid_forget all widgets.
     |  
     |  ggrriiddWWddgg(self, startingRow, startingCol)
     |      Grid the widgets starting at the specified startingRow and startingCol
     |      
     |      Return the next startingRow and startingCol
     |  
     |  rreeggrriiddWWddgg(self)
     |  
     |  rreessttoorreeCCuurrrreenntt(self, dumWdg=None)
     |      Restore parameter to current state.
     |  
     |  rreessttoorreeDDeeffaauulltt(self, dumWdg=None)
     |      Restore paraemter to default state.
     |  
     |  sseettEEnnaabbllee(self, doEnable)
     |      Enable or disable the control widgets
     |  
     |  uunnggrriiddWWddgg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseParameterWdgSet:
     |  
     |  iissCCuurrrreenntt
     |      Does value of parameter match most current command?
     |  
     |  iissDDeeffaauulltt
     |      Does value of parameter match most current command?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ItemWdgSet:
     |  
     |  ____ssttrr____(self)
     |  
     |  sseettSSttaattee(self, state, isCurrent=True)
     |      Set the state of this item
     |      
     |      Inputs:
     |      - state: desired state for object
     |      - text: new text; if None then left unchanged
     |      
     |      @raise RuntimeError if called after state is done
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ItemState:
     |  
     |  ddiiddFFaaiill
     |      Did this stage of the sop command fail?
     |  
     |  iissDDoonnee
     |      Is this object finished (whether successfully or not)?
     |  
     |  iissRRuunnnniinngg
     |      Is this object running normally?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ItemState:
     |  
     |  DDiissaabblleeddSSttaatteess = set(['off'])
     |  
     |  DDoonneeSSttaatteess = set(['aborted', 'done', 'failed', 'idle', 'off'])
     |  
     |  EErrrroorrSSttaatteess = set(['failed'])
     |  
     |  RRuunnnniinnggSSttaatteess = set(['prepping', 'running', 'starting'])
     |  
     |  VVaalliiddSSttaatteess = set([None, 'aborted', 'done', 'failed', 'idle', 'off', ....
     |  
     |  WWaarrnniinnggSSttaatteess = set(['aborted'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RO.AddCallback.BaseMixin:
     |  
     |  aaddddCCaallllbbaacckk(self, callFunc, callNow=None)
     |      Add a callback function to the list.
     |      
     |      If the callback is already present, it is not re-added.
     |      
     |      Inputs:
     |      - callFunc  a callback function.
     |          It will receive one argument: self (the object doing the calling);
     |          If None, no callback function is added.
     |      - callNow   if True, calls the function immediately
     |                  if omitted or None, the default is used
     |      
     |      Raises ValueError if callFunc is not callable
     |  
     |  ccaallllbbaacckkssEEnnaabblleedd(self)
     |      Are callbacks enabled?
     |      
     |      False if executing callbacks (and possibly other reasons if using _disableCallbacksContext).
     |  
     |  rreemmoovveeCCaallllbbaacckk(self, callFunc, doRaise=True)
     |      Delete the callback function.
     |      
     |      Inputs:
     |      - callFunc  callback function to remove
     |      - doRaise   raise exception if unsuccessful? True by default.
     |      
     |      Return:
     |      - True if successful, raise error or return False otherwise.
     |      
     |      If doRaise true:
     |      - Raises ValueError if callback not found
     |      - Raises RuntimeError if executing callbacks when called
     |      Otherwise returns False in either case.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RO.AddCallback.BaseMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class SSttaaggeeWWddggSSeett(ItemWdgSet)
     |  An object representing a SOP command stage
     |  
     |  Method resolution order:
     |      StageWdgSet
     |      ItemWdgSet
     |      ItemState
     |      RO.AddCallback.BaseMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name, dispName=None, defEnabled=True)
     |      Construct a partial StageWdgSet. Call build to finish the job.
     |      
     |      Inputs:
     |      - name: name of stage, as used in sop commands
     |      - dispName: displayed name (text for control widget); if None then use last field of name
     |      - defEnabled: is stage enabled by default?
     |  
     |  bbuuiilldd(self, master, callFunc=None, helpURL=None)
     |      Finish building the widgets, but do not grid them
     |      
     |      Warning: must call before using the object!
     |      
     |      Inputs:
     |      - master: master widget for stateWdg
     |      - callFunc: callback function for state changes
     |      - helpURL: URL of help file
     |      
     |      self.stateWdg and self.controlWdg are the stage widgets
     |  
     |  eennaabblleeWWddgg(self, controlWdg=None)
     |      Enable widgets
     |  
     |  ggeettCCmmddSSttrr(self)
     |      Return the command string for the current settings
     |  
     |  rreessttoorreeCCuurrrreenntt(self, dumWdg=None)
     |      Restore control widget and parameters to match the running or most recently run command
     |  
     |  rreessttoorreeDDeeffaauulltt(self, dumWdg=None)
     |      Restore control widget and parameters to their default state.
     |  
     |  sseettSSttaattee(self, state, isCurrent=True)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  iissCCuurrrreenntt
     |      Is the stage enabled checkbox the same as the current or most recent sop command?
     |  
     |  iissDDeeffaauulltt
     |      Is the stage enabled checkbox set to its default state?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ItemWdgSet:
     |  
     |  ____ssttrr____(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ItemState:
     |  
     |  ddiiddFFaaiill
     |      Did this stage of the sop command fail?
     |  
     |  iissDDoonnee
     |      Is this object finished (whether successfully or not)?
     |  
     |  iissRRuunnnniinngg
     |      Is this object running normally?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ItemState:
     |  
     |  DDiissaabblleeddSSttaatteess = set(['off'])
     |  
     |  DDoonneeSSttaatteess = set(['aborted', 'done', 'failed', 'idle', 'off'])
     |  
     |  EErrrroorrSSttaatteess = set(['failed'])
     |  
     |  RRuunnnniinnggSSttaatteess = set(['prepping', 'running', 'starting'])
     |  
     |  VVaalliiddSSttaatteess = set([None, 'aborted', 'done', 'failed', 'idle', 'off', ....
     |  
     |  WWaarrnniinnggSSttaatteess = set(['aborted'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RO.AddCallback.BaseMixin:
     |  
     |  aaddddCCaallllbbaacckk(self, callFunc, callNow=None)
     |      Add a callback function to the list.
     |      
     |      If the callback is already present, it is not re-added.
     |      
     |      Inputs:
     |      - callFunc  a callback function.
     |          It will receive one argument: self (the object doing the calling);
     |          If None, no callback function is added.
     |      - callNow   if True, calls the function immediately
     |                  if omitted or None, the default is used
     |      
     |      Raises ValueError if callFunc is not callable
     |  
     |  ccaallllbbaacckkssEEnnaabblleedd(self)
     |      Are callbacks enabled?
     |      
     |      False if executing callbacks (and possibly other reasons if using _disableCallbacksContext).
     |  
     |  rreemmoovveeCCaallllbbaacckk(self, callFunc, doRaise=True)
     |      Delete the callback function.
     |      
     |      Inputs:
     |      - callFunc  callback function to remove
     |      - doRaise   raise exception if unsuccessful? True by default.
     |      
     |      Return:
     |      - True if successful, raise error or return False otherwise.
     |      
     |      If doRaise true:
     |      - Raises ValueError if callback not found
     |      - Raises RuntimeError if executing callbacks when called
     |      Otherwise returns False in either case.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RO.AddCallback.BaseMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class SSttrriinnggPPaarraammeetteerrWWddggSSeett(BaseParameterWdgSet)
     |  An object representing a string parameter for a SOP command stage
     |  
     |  Method resolution order:
     |      StringParameterWdgSet
     |      BaseParameterWdgSet
     |      ItemWdgSet
     |      ItemState
     |      RO.AddCallback.BaseMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name, dispName=None, defValue=None, units=None, paramWidth=6, trackCurr=True, stageStr='', skipRows=0, startNewColumn=False, ctrlColSpan=None, ctrlSticky='w', helpText=None, partialPattern=None, finalPattern=None)
     |      Constructor
     |      
     |      Inputs:
     |      - name: name of parameter, as used in sop commands
     |      - dispName: displayed name (text for control widget); if None then use last field of name
     |      - defValue: default value for parameter
     |      - units: units of parameter (a string); if provided then self.unitsWdg is set to
     |          an RO.Wdg.StrLabel containing the string; otherwise None
     |      - trackCurrent: if True then display current value
     |      - stageStr: a string of one or more space-separated stage names; if not empty
     |          then the parameter will only be visible if any of the specified stages is visible
     |      - skipRows: number of rows to skip before displaying
     |      - startNewColumn: if True then display parameter in a new column (then skip skipRows before gridding)
     |      - ctrlColSpan: column span for data entry widget; if None then the value is computed
     |      - ctrlSticky: sticky for data entry widget
     |      - helpText: help text for entry widget; if None then a default is generated
     |      - partialPattern    a regular expression string which partial values must match
     |      - finalPattern  a regular expression string that the final value must match;
     |          if omitted, defaults to partialPattern
     |  
     |  ggeettCCmmddSSttrr(self)
     |      Return a portion of a command string for this parameter
     |      
     |      Override the default behavior to quote the string value
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  iissDDeeffaauulltt
     |      Does value of parameter match most current command?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseParameterWdgSet:
     |  
     |  bbuuiilldd(self, master, callFunc=None, helpURL=None)
     |      Finish building the widget, including constructing wdgSet.
     |      
     |      Warning: must call before using the object!
     |      
     |      Inputs:
     |      - master: master widget for stateWdg
     |      - callFunc: callback function for state changes
     |      - helpURL: URL of help file
     |      
     |      self.stateWdg and self.controlWdg are the stage widgets
     |      self.parameterList contains a list of parameters (including parameter widgets).
     |  
     |  eennaabblleeWWddgg(self, dumWdg=None)
     |  
     |  ggrriiddFFoorrggeettWWddgg(self)
     |      grid_forget all widgets.
     |  
     |  ggrriiddWWddgg(self, startingRow, startingCol)
     |      Grid the widgets starting at the specified startingRow and startingCol
     |      
     |      Return the next startingRow and startingCol
     |  
     |  rreeggrriiddWWddgg(self)
     |  
     |  rreessttoorreeCCuurrrreenntt(self, dumWdg=None)
     |      Restore parameter to current state.
     |  
     |  rreessttoorreeDDeeffaauulltt(self, dumWdg=None)
     |      Restore paraemter to default state.
     |  
     |  sseettEEnnaabbllee(self, doEnable)
     |      Enable or disable the control widgets
     |  
     |  uunnggrriiddWWddgg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseParameterWdgSet:
     |  
     |  iissCCuurrrreenntt
     |      Does value of parameter match most current command?
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ItemWdgSet:
     |  
     |  ____ssttrr____(self)
     |  
     |  sseettSSttaattee(self, state, isCurrent=True)
     |      Set the state of this item
     |      
     |      Inputs:
     |      - state: desired state for object
     |      - text: new text; if None then left unchanged
     |      
     |      @raise RuntimeError if called after state is done
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ItemState:
     |  
     |  ddiiddFFaaiill
     |      Did this stage of the sop command fail?
     |  
     |  iissDDoonnee
     |      Is this object finished (whether successfully or not)?
     |  
     |  iissRRuunnnniinngg
     |      Is this object running normally?
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ItemState:
     |  
     |  DDiissaabblleeddSSttaatteess = set(['off'])
     |  
     |  DDoonneeSSttaatteess = set(['aborted', 'done', 'failed', 'idle', 'off'])
     |  
     |  EErrrroorrSSttaatteess = set(['failed'])
     |  
     |  RRuunnnniinnggSSttaatteess = set(['prepping', 'running', 'starting'])
     |  
     |  VVaalliiddSSttaatteess = set([None, 'aborted', 'done', 'failed', 'idle', 'off', ....
     |  
     |  WWaarrnniinnggSSttaatteess = set(['aborted'])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RO.AddCallback.BaseMixin:
     |  
     |  aaddddCCaallllbbaacckk(self, callFunc, callNow=None)
     |      Add a callback function to the list.
     |      
     |      If the callback is already present, it is not re-added.
     |      
     |      Inputs:
     |      - callFunc  a callback function.
     |          It will receive one argument: self (the object doing the calling);
     |          If None, no callback function is added.
     |      - callNow   if True, calls the function immediately
     |                  if omitted or None, the default is used
     |      
     |      Raises ValueError if callFunc is not callable
     |  
     |  ccaallllbbaacckkssEEnnaabblleedd(self)
     |      Are callbacks enabled?
     |      
     |      False if executing callbacks (and possibly other reasons if using _disableCallbacksContext).
     |  
     |  rreemmoovveeCCaallllbbaacckk(self, callFunc, doRaise=True)
     |      Delete the callback function.
     |      
     |      Inputs:
     |      - callFunc  callback function to remove
     |      - doRaise   raise exception if unsuccessful? True by default.
     |      
     |      Return:
     |      - True if successful, raise error or return False otherwise.
     |      
     |      If doRaise true:
     |      - Raises ValueError if callback not found
     |      - Raises RuntimeError if executing callbacks when called
     |      Otherwise returns False in either case.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RO.AddCallback.BaseMixin:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class TTiimmeerrWWddgg(Tkinter.Frame)
     |  A thin wrapper around RO.Wdg.TimeBar that hides itself when necessary
     |  
     |  This is not needed for commands or stages. It *may* be wanted for parameters
     |  and is likely to be wanted for tasks (which will be handled in a different file).
     |  Meanwhile keep it around...
     |  
     |  Method resolution order:
     |      TimerWdg
     |      Tkinter.Frame
     |      Tkinter.Widget
     |      Tkinter.BaseWidget
     |      Tkinter.Misc
     |      Tkinter.Pack
     |      Tkinter.Place
     |      Tkinter.Grid
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, master)
     |  
     |  cclleeaarr(self)
     |      Clear and hide the timer widget
     |  
     |  sseettTTiimmee(self, startTime=0, totDuration=0)
     |      Run or hide the countdown timer
     |      
     |      Inputs:
     |      - startTime: predicted start time (TAI, MJD seconds); 0 = now
     |      - totDuration: total predicted duration of timer (sec); 0 = hide timer
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Tkinter.BaseWidget:
     |  
     |  ddeessttrrooyy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Tkinter.Misc:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____ggeettiitteemm____ = cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  ____sseettiitteemm____(self, key, value)
     |  
     |  ____ssttrr____(self)
     |      Return the window path name of this widget.
     |  
     |  aafftteerr(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  aafftteerr__ccaanncceell(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  aafftteerr__iiddllee(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  bbbbooxx = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  bbeellll(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bbiinndd(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bbiinndd__aallll(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bbiinndd__ccllaassss(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bbiinnddttaaggss(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  ccggeett(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  cclliippbbooaarrdd__aappppeenndd(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  cclliippbbooaarrdd__cclleeaarr(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  cclliippbbooaarrdd__ggeett(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  ccoolloorrmmooddeell(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  ccoolluummnnccoonnffiigguurree = grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ccoonnffiigg = configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ccoonnffiigguurree(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  ddeelleetteeccoommmmaanndd(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  eevveenntt__aadddd(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  eevveenntt__ddeelleettee(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  eevveenntt__ggeenneerraattee(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  eevveenntt__iinnffoo(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  ffooccuuss = focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ffooccuuss__ddiissppllaayyooff(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  ffooccuuss__ffoorrccee(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  ffooccuuss__ggeett(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  ffooccuuss__llaassttffoorr(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  ffooccuuss__sseett(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  ggeettbboooolleeaann(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  ggeettvvaarr(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  ggrraabb__ccuurrrreenntt(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  ggrraabb__rreelleeaassee(self)
     |      Release grab for this widget if currently set.
     |  
     |  ggrraabb__sseett(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  ggrraabb__sseett__gglloobbaall(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  ggrraabb__ssttaattuuss(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  ggrriidd__bbbbooxx(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  ggrriidd__ccoolluummnnccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__llooccaattiioonn(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  ggrriidd__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  ggrriidd__rroowwccoonnffiigguurree(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  ggrriidd__ssiizzee(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ggrriidd__ssllaavveess(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  iimmaaggee__nnaammeess(self)
     |      Return a list of all existing image names.
     |  
     |  iimmaaggee__ttyyppeess(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  kkeeyyss(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lliifftt = tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  lloowweerr(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mmaaiinnlloooopp(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nnaammeettoowwiiddggeett(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  ooppttiioonn__aadddd(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  ooppttiioonn__cclleeaarr(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  ooppttiioonn__ggeett(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  ooppttiioonn__rreeaaddffiillee(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  ppaacckk__pprrooppaaggaattee(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  ppaacckk__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ppllaaccee__ssllaavveess(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  pprrooppaaggaattee = pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  qquuiitt(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  rreeggiisstteerr = _register(self, func, subst=None, needcleanup=1)
     |      Return a newly created Tcl function. If this
     |      function is called, the Python function FUNC will
     |      be executed. An optional function SUBST can
     |      be given which will be executed before FUNC.
     |  
     |  rroowwccoonnffiigguurree = grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  sseelleeccttiioonn__cclleeaarr(self, **kw)
     |      Clear the current X selection.
     |  
     |  sseelleeccttiioonn__ggeett(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  sseelleeccttiioonn__hhaannddllee(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseelleeccttiioonn__oowwnn(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  sseelleeccttiioonn__oowwnn__ggeett(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  sseenndd(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  sseettvvaarr(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  ssiizzee = grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  ssllaavveess = pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  ttkk__bbiissqquuee(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  ttkk__ffooccuussFFoolllloowwssMMoouussee(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  ttkk__ffooccuussNNeexxtt(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  ttkk__ffooccuussPPrreevv(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  ttkk__mmeennuuBBaarr(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  ttkk__sseettPPaalleettttee(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  ttkk__ssttrriiccttMMoottiiff(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  ttkkrraaiissee(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  uunnbbiinndd(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  uunnbbiinndd__aallll(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  uunnbbiinndd__ccllaassss(self, className, sequence)
     |      Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  uuppddaattee(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  uuppddaattee__iiddlleettaasskkss(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wwaaiitt__vvaarriiaabbllee(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwaaiitt__vviissiibbiilliittyy(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiitt__wwiinnddooww(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  wwaaiittvvaarr = wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wwiinnffoo__aattoomm(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  wwiinnffoo__aattoommnnaammee(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  wwiinnffoo__cceellllss(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  wwiinnffoo__cchhiillddrreenn(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  wwiinnffoo__ccllaassss(self)
     |      Return window class name of this widget.
     |  
     |  wwiinnffoo__ccoolloorrmmaappffuullll(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  wwiinnffoo__ccoonnttaaiinniinngg(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  wwiinnffoo__ddeepptthh(self)
     |      Return the number of bits per pixel.
     |  
     |  wwiinnffoo__eexxiissttss(self)
     |      Return true if this widget exists.
     |  
     |  wwiinnffoo__ffppiixxeellss(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  wwiinnffoo__ggeeoommeettrryy(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  wwiinnffoo__hheeiigghhtt(self)
     |      Return height of this widget.
     |  
     |  wwiinnffoo__iidd(self)
     |      Return identifier ID for this widget.
     |  
     |  wwiinnffoo__iinntteerrppss(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  wwiinnffoo__iissmmaappppeedd(self)
     |      Return true if this widget is mapped.
     |  
     |  wwiinnffoo__mmaannaaggeerr(self)
     |      Return the window mananger name for this widget.
     |  
     |  wwiinnffoo__nnaammee(self)
     |      Return the name of this widget.
     |  
     |  wwiinnffoo__ppaarreenntt(self)
     |      Return the name of the parent of this widget.
     |  
     |  wwiinnffoo__ppaatthhnnaammee(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  wwiinnffoo__ppiixxeellss(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  wwiinnffoo__ppooiinntteerrxx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerrxxyy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  wwiinnffoo__ppooiinntteerryy(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  wwiinnffoo__rreeqqhheeiigghhtt(self)
     |      Return requested height of this widget.
     |  
     |  wwiinnffoo__rreeqqwwiiddtthh(self)
     |      Return requested width of this widget.
     |  
     |  wwiinnffoo__rrggbb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  wwiinnffoo__rroooottxx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__rroooottyy(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  wwiinnffoo__ssccrreeeenn(self)
     |      Return the screen name of this widget.
     |  
     |  wwiinnffoo__ssccrreeeenncceellllss(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennddeepptthh(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  wwiinnffoo__ssccrreeeennhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmhheeiigghhtt(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennmmmmwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  wwiinnffoo__ssccrreeeennvviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  wwiinnffoo__ssccrreeeennwwiiddtthh(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  wwiinnffoo__sseerrvveerr(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  wwiinnffoo__ttoopplleevveell(self)
     |      Return the toplevel widget of this widget.
     |  
     |  wwiinnffoo__vviieewwaabbllee(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  wwiinnffoo__vviissuuaall(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  wwiinnffoo__vviissuuaalliidd(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  wwiinnffoo__vviissuuaallssaavvaaiillaabbllee(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  wwiinnffoo__vvrrooootthheeiigghhtt(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  wwiinnffoo__vvrroooottwwiiddtthh(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  wwiinnffoo__vvrroooottxx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__vvrroooottyy(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  wwiinnffoo__wwiiddtthh(self)
     |      Return the width of this widget.
     |  
     |  wwiinnffoo__xx(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  wwiinnffoo__yy(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Tkinter.Misc:
     |  
     |  ggeettddoouubbllee = <type 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  ggeettiinntt = <type 'int'>
     |      int(x=0) -> int or long
     |      int(x, base=10) -> int or long
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is floating point, the conversion truncates towards zero.
     |      If x is outside the integer range, the function returns a long instead.
     |      
     |      If x is not a number or if base is given, then x must be a string or
     |      Unicode object representing an integer literal in the given base.  The
     |      literal can be preceded by '+' or '-' and be surrounded by whitespace.
     |      The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
     |      interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Tkinter.Pack:
     |  
     |  ffoorrggeett = pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  iinnffoo = pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ppaacckk = pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  ppaacckk__ffoorrggeett(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  ppaacckk__iinnffoo(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Tkinter.Place:
     |  
     |  ppllaaccee = place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  ppllaaccee__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ppllaaccee__iinnffoo(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Tkinter.Grid:
     |  
     |  ggrriidd = grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ccoonnffiigguurree(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  ggrriidd__ffoorrggeett(self)
     |      Unmap this widget.
     |  
     |  ggrriidd__iinnffoo(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |  
     |  ggrriidd__rreemmoovvee(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  llooccaattiioonn = grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.

FFUUNNCCTTIIOONNSS
    ffoorrmmaattSSuurrvveeyySSttrr(survey)
        Format survey keyword data
        
        @param[in] surveyData: the value of guider.survey or sop.survey
            (a pair of strings, either of which may be None)

DDAATTAA
    CCoommmmaannddNNaammeeWWiiddtthh = 12
    DDeeffCCoouunnttWWiiddtthh = 3
    DDeeffPPaarraammWWiiddtthh = 6
    DDeeffSSttaatteeWWiiddtthh = 10
    SSttaaggeeNNaammeeWWiiddtthh = 10


