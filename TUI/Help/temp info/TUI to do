Display guider images and support guiding on/off.Support pointing model data collection.Improve display of changed values. Consider making all user-settable widgets (Entry, Checkbutton, Optionmenu, etc.) capable of being self-indicating (i.e. that value != default value), rather than using a separate changed indicator.- A pink background seems most likely to work. Even for Mac optionmenu this has some hope of being successful. Not so sure about checkbuttons, since their default colors are pretty damn weird on some platforms (something worth fixing anyway!).- At least make the changed indicator much more visible.Report the issue that event_generate is not thread safe (a-la the ScriptRunner bug, where the event was generated before the current Tk event was finished, and somehow started a new event at the same time) and solicit alternatives to polling. Right now I poll for thread completion, but yecch!Improve ScriptWdg to report reload error in status window if script cannot be reloaded.RO.Wdg.Entry getNum: do we really have ANY use for getNum to return the default value if the field is blank? I suspect the answer should always be zero and that the default is purely there for:- the initial value- displaying an "is changed" indicator- the default menuIf this is not the case, then at least make this user-settable. It should be trivial to get a number that is 0 when the field is blank, even if the field has a default.Modify callbacks to use weak references or subscribers to unsubscribe self when going away because:- widgets can now go away, e.g. due to scripts that are reloaded and to systems that display a different # of widgets depending on incoming data.- widgets subscribe to color prefs and to keyvariables- other objects may also go away, e.g. callback functionsImprove tlamps command. Things this implies:- Use symbols to show the lamp is on or off or unknown. Generate some bitmaps for this purpose.- Consider supporting defaults that are not valid values. The indicator will always indicate "this is a change", which might be good.- Consider making checkbuttons and other entry widgets self-indicating for "changed" (non-default value).Prefs should be auto-applied if possible. This is especially obvious for checkbuttons and files/etc, that use a dialog box to set values. It is trickier for fonts, strings, ints and floats because the user wants to finish editing before applying. A checkbutton and an x-button (accept/revert) would probably solve that problem (so would using a dialog box, but that's ugly). Also, auto-apply as soon as the current pref loses focus.Related prefs issues:- Indicate prefs that don't have saved values (what will change if the user saves)- Warn the user if they try to quit without saving changes.Regarding modifications of RO.Wdg.Text to allow tags of st_Normal, etc. and setting isCurrent.:- consider modifying the log window to take advantage of it (this should eliminate a lot of code). The trouble is, it uses more general categories.- are text widgets being used where isCurrent is relevant? If so, modify them.Regarding standard logger logMsg added to TUIModel:- document this- modify code to take advantage of it- simplify and standardize KeyDispatcher logMsg  to use st_ constants.Add a warning display in an instrument window if that instrument is not the current instrument, e.g. a warning text line just above the buttons. Also warn if the user has no permission??? Perhaps a colored border around the window -- blue if not the current instrument? Or some kind of instrument-specific icon that changes appearance depending if the instrument is current or not, and whether the user has permission or not? Could also indicate if instrument is connected?Allow an easier way to open an instrument's exposure window. Two possibilities:- open both windows when selecting the instrument name- separate entries for each in the Inst menuLearn to save limited info with window position, e.g. are certain sub-panels being displayed? Basically have a routine that, if it returns a value, is saved with the window info. That value is then restored via a separate routine. Value types could be limited to strings or numbers, but it'd be nicer to also support dicts or lists containing strings and numbers.Script reload issue: would like some way of widgets auto-unsubscribing on delete. This implies a widget knows it is subscribed, which is not always obvious (for instance it may be set via a callback function, in which case that function should unsubscribe). It may make more sense to auto-unsubscribe if the error in calling the function means "no such widget or no such object...". But the danger there is unsubscribing when the function is only temporarily hosed.Bug: if auto ftp directory invalid, messages go to console, not log window.Save auto-ftp'd user images in date-specific subdirectories (the same date-specific subdirs used by the hub).GRIM:Grid script:- add separator bar- test the heck out of itExpose widget: rework as one widget that combines status and user input, all gridding in a common frame (and includes the gridder for adding additional widgets). That will simplify use in scripts.Script problems:- if a command has a warning that is not preserved in the user's display; the next cmd hides it.- want a done message (e.g. "drift done; slewing to original position")- would *really like* a way of waiting for the end cleanup stuff to execute, even though in some (all???) cases the user could start again immediately.Desired improvements to <inst>Expose:- Add a "next" that really does auto-increment (starting at 1 for a new night). Ditch the user's "share seq #" and sequence number input. Issues:- next should ALWAYS work. If a user puts files in via some tricky mechanism, <inst>Expose should not reject a command that uses "next". Instead it should skip ahead to a safe #.- Allow users to specify starting seq#? The only *SAFE* way to do this is to have <inst>Expose keep track of the max # used, and have next always use that number. That is as opposed to having next mean "next after the most recently used number". But it may be easier to disallow a starting number at all?- If users really do want a starting #, then perhaps we need two kinds of "next", the current "per file name" next, which can be computed by scanning the directory, and the more global "per program per night" next.- What to do on restart (save state, so it can be restored, or else create a new date directory)If possible, add "Edit" or "Show" commands to script ctx menu, to open the script in an editor or display it in Finder. The trick is figuring out the necessary platform-independent code. At least unix has the concept of a favorite editor, so it might not be too bad.Fix help system to call webbrowser from a thread. That way if the browser has to start up it doesn't freeze TUI. This sounds like a good use of ScriptRunner.Bug/misfeature: if one command supersedes another in Secondary Focus (and probably many other windows) the displayed text seems a bit out of order/confusing. I think the old command continues putting text in the status widget even though I believe the status widget tries to stop that from happening. So that code may be broken.Bug/misfeature: while loading a catalog I have some text I want displayed (a status report) but in fact it is never displayed. Either ditch the text or (better yet) find some way to yield background time so updates continue to happen. The nicest (though complex) solution may be to compute az/alt positions (for the sky window) using a background task, in which case catalog loading should be fast enough not to need any intermediate messages.When a slew is superseded, the "Warning: halting countdown timer..." message is often printed. This is because a single "T status is sometimes output while the slew is superseded. Solutions include fix the TCC (surely it should NOT be tracking while superseding!!!) or modify TUI to ignore the first "T" (but then it'll be 10 seconds before the timer quits if it misses the "SlewEnd", yecch! Still...it should rarely or never miss.).Add a sound queue for "Exposure Sequence Done".On disconnect, programs are cleared out of the Permissions panel, but Lockout remains and the background color remains. At least pink out the background! (In fact, could look for isCurrent on programs, and if not, delete all programs and pink out. This is a bit less direct getting a connection callback, but might do.Alternatively, one could do a full erase at connect time (if one could guarantee to get it in before the new perms data arrived), and meanwhile show the programs and program background as pinked out. This is probably more standard than my current implementation.Implement defMenu in Checkbutton and modify Echelle StatusConfigInputWdg to use this (so user widgets have default=Current as one of the menu items).Some changedwdg in the DIS menu do not have help even though their items have help.On my X terminal when running off Regen, the basic entry error beep is played but none of the sound queues. This suggests that the snack test is failing or that the substitute beeps aren't playing when the ought to.Show velocity of net user position if nonzero.Show parallactic angle or the equivalent (including velocity?).Also show spider angle (including velocity?).Try to implement different sound queues for offets and slewing.Does PIL work with 16 bit images? If so, it may be a good guide viewer.Have TUI pay attention to which actors are connected:- If an instrument is disconnected, then:  - Display in that instrument's control windows.  - Set keywords for that actor to NOT current  - No refresh commands should be attempted for that actor.    This saves needless command failures.  - Note that it requires the TCC to know which actors are connected    *before* it starts sending commands. But this is fine --    it can assume that none are connected, by default,    then update when the hub gives it new info!!!!!- If an instrument is connected:  - Display in that instrument's control window.  - Do *not* auto-refresh the variables (i.e. do NOT    issue getkeys commands); the hub will already trigger    the necessary output automatically as it connects.This still leaves the issue of TUI connecting while the hubis connecting to an instrument. Then TUI issues getKeys commandsthat cannot be properly satisfied. This would be better handledif the hub only said it was connected after its init commandshad been executed.The catalog dialog box should display near its parent widget (the catalog menu).Add GUI for grim dither. Publish output to update controls via the new mechanism Craig and I discussed. broadcast <msgType> keyword-value dataAdd support for version checking at connect time.Add support for first trying to read keyword data from the hub. Perhaps also try to read it from the actor, but perhaps not.Update SkyWdg to use axes limits for az wrap as reported by the TCC. I would prefer to still display 0-90 for altitude, but can imagine graying out the inaccessible areas.Add color prefs for Sky and Focal Plane windows.Expose problems:- want to be able to reliably query exposure state; the problem is if a sequence is paused and I connect then I have no way of knowing unless I ask, and TUI gets upset if it asks for data and don't get it back again. It needs to reliably know if a sequence is done or in progress. I saw this a lot with GRIM -- connect, try to take an exposure, it was rejected because an exposure was in progress. At least if the rejection included grimSeqState then my controls would be updated and life would be a lot better -- the Stop button would finally highlight and be usable. As it stands, the user is totally stuck -- user has to type the stop command manually or cannot do anything!Add format (fits, ???) controls to Expose widget?Make the various instrument expose windows more different. Consider painting the instrument name in huge letters in the background, or having a different background color for each instrument or...?- DIS exposure is in integer units only; in general need a way to specify maximum precision -- at least for nicely formatted display if not explicitly constrain it.Display azimuth limits in Sky window. Note that the telescope is sometimes above the TCC's limit (e.g. during engineering), so it's important to be able to display it even then. Perhaps mark inaccessible areas in some color (gray or pink?).Show airmass of prospective position (e.g. in the slew window); req. by Ricardo.Show tracking time before it goes out of bounds for current and prospective positions; support a user-configurable upper airmass limit and say what boundary is hit (probably by displaying a track on the Telescope window).Arc offsets and boresight offsets don't work for Phys or Mount; fix the drift scan widget and the offset widget accordingly, so they are disabled.Allow at least one additional log window.Try to overhaul Entry widgets, pref variables, etc. to use common code.Overhaul "show window" buttons in DIS widgets. Having them be ordinary pushbuttons feels wrong, but having them be checkbuttons is also wrong since the state should not toggle (how about checkbuttons that self-untoggle? Sounds like a dangerous kludge to me.)Modify OptionMenu on the Mac. The aqua thing is terrible -- too big, no settable font, no hint if disabled. Use a label with an appropriate frame, instead (after seeing what the unix control looks like).Log window: ditch commands menu. Perhaps add a 4th item to the menu: Info, Commands, Warnings, Errors. Commands shows you *your* commands and associated replies.Finish cleaning up the prefs, including:- convert to using RO.Wdg.Entry widgets (if that makes any sense; they sure share a lot of methods and a basic underlying structure)The status bar is presently a single line (read only Entry); command feedback is usually truncated and hard to read. Actually, it'd be hard to read even if it weren't truncated. Try to improve this somehow. Possibilities:- Simple but not very helpful: add another line- Don't display the entire reply, only display text; but often one only gets keywords, so it'd be nice to be able to get the full info, e.g. via contextual pop-up menu.If sending a command fails (no connection), report it in the log window as well as in the command monitor.Aqua Tk: fix TUI menu:- So it's a standard menu bar (on Mac you get the indicator and no scan ability). It's fine on unix. The thing to try is toplevel["menu"] = tuiMenu, where tuiMenu is a single menu button with cascade entries for the various stuff.- so it looks OK if the main font is changed (to some extent OptionMenu also suffers).Focus setting widget.Have the foreground color in Telescope (SkyWdg) and Focal Plane auto-update when prefs are update (the background already does). Add prefs for any nonstandard colors or stop using nonstandard colors. (Bill Ketzeback)Slew improvements:- If no rotator, then disable all rot controls; rot angle and type are already done, but also drift scanning and rot wrap.- Add help menus and text to the main level option buttons (the ones that are always displayed and toggle the option panels).- If an option is set programmatically (e.g. via the history menu), make that panel open up. This will be tricky when combined with the next two items:- When an option panel is disabled, make sure its option button is disabled.- Handle TUI default != TCC default; in particular, for clearing guide offsets on every slew. (Actually, this can be fixed in the TCC and that might be best).Log widget further improvements:- Is it really OK to ditch colors in the controls? If we restore them, how do we handle colors of the most common items (which currently do now show up in the menus)? By duplicating the lowest priority item and having it select All? Seems a bit clumsy, but...- Want a way to show replies to User and Refresh commands, even when Information is not shown. Note that this isn't totally useful because sometimes the msgtag isn't propagated through. Could do a lot with the ability to filter replies to one's own commands, other users' commands and unsolicited replies. Still...most users probably just want to see the replies to their own user commands (when hiding info).- Pop-up menus are clumsy. Radio buttons? It'll be a hell of a hit on real estate. One could click to bring up a dialog box to modify settings.- Want to monitor stuff from particular actors.- Probably can delete the Replies menu -- it's confusing and not very useful.Label the command entry text box. Change the label when talking to various instruments. Allow multiple connections to specific instruments or have one window? If the former, allow filtering of replies by source (actor) -- which is a good idea in any case! One obvious question, though, is how to conveniently allow users to do BOTH of:- conveniently see replies only from the inst they are sending commands to- see additional replies (e.g. all replies, or a subset of actors)Display the likely azimuth and rotator wrap of the proposed position. This is nasty as it may not be possible to compute it exactly, and when in doubt it should shown up as uncertain (so that the user knows it's best to specify a wrap).Time-stamp log entries in human-readable form (Russet). Allow show/hide?ObjInstAng and SpiderInstAng continue to happily be computed even when the rotator dies. This should be fixed, if possible, but be careful -- if no rotator exists, these numbers can still be computed!Consider a sky widget-ish thing that looks at a portion of the sky and can display the bright star catalog (or other dense catalogs). This would presumably have grid curves in RA/Dec, not Az/Alt, though it should clearly show if the portion being examined is up (black background) or not (gray background).Slew widget:- Set azimuth limits based on what we learn from the TCC (for mount coords)? Hard-coding these limits is reasonable, but if we can do rotation, why not do azimuth? On the down side it adds complexity. On the up side, if APO decides to mess with things TUI is already doing the right thing.- Add a way to set field to current position (or always add newly-slewed-objects to to the history menu).- Should stars on the history menu also show up on the az/alt display? Perhaps.Show images with the ability to drag things around, auto-center stars, etc. This is only for the current instrument (e.g. slitviewer images for DIS). We may want to be able to optionally overlay features (such as the slit and center) in green.Is position entry good enough? Improvements to consider:- f or <return> for format (using default format) or n for neaten- support click or >/< or up-arrow/down-arrow for incr/decrAudio messaging?***** Stuff perhaps not worth fixing: *****- Improve Slew widget so one can check catalog values without using Tkinter. In other words, make a model of the data that is independent of the GUI, and use that model to generate the widgets. This strongly suggests a major rewrite of InputCont, whereby the containers know all about limits (in which case those limits must be used by the associated widgets, which sounds doable but potentially tricky).- A potentially simpler but less satisfying option is to allow one to *CLONE* an input container without the input widgets. This is not necessarily good enough, though, because some limits change as data is updated (e.g. the coordinate system) and presently I think GUI callbacks are used to handle that.- Meanwhile, live with loading catalogs in the foreground, or use ugly rescheduling to load in batches (ugh!).- Log widget: On a Mac the selection is not shown unless the widget has focus. This rather sucks for the search function, but I suggest not worrying about it right now -- it works fine under Solaris.- Add caps lock warning to ConnectWdg. This is probably not possible in a platform-independent way; Tk events cannot tell that caps lock is down when another key is pressed. On the other hand, one can ask if caps lock is down if all letters in the password are uppercase (only worth doing if the password fails)!!!- Modify Entry widgets (at least) so they can have a name. If the name is available, modify InputCont to use that name. Then limits warnings and such can specify which widget is causing problems (since the widget is passed as part of the <<EntryError>> event).	- Note: I tried this and ran into problems. In the case of the user looking at the screen, the name will often NOT match what's being done internally, so this could be confusing.- Help comes up in whatever desktop is running the help browser, rather than the current desktop containing TUI. I doubt I can fix this without building a web browser into TUI, which I am reluctant to do because it's bound to be inferior to the user's favorite browser.